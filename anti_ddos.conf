#simple example for DDOS

http {
  # ...

  server {
    listen 80;
    server_name example.com;

    # Limit the maximum number of connections per IP
    limit_conn_zone $binary_remote_addr zone=ddos_conn:10m;
    limit_conn ddos_conn 10;

    # Limit the maximum number of requests per IP
    limit_req_zone $binary_remote_addr zone=ddos_req:10m rate=10r/s;
    limit_req zone=ddos_req burst=20;

    # Set a higher timeout for slow connections
    client_body_timeout 10s;
    client_header_timeout 10s;
    keepalive_timeout 15s;
    send_timeout 10s;

    # Enable SYN cookies to protect against SYN flood attacks
    listen 80 syncookies;

    # Enable TCP Fast Open to improve connection setup performance
    tcp_fastopen on;

    # Set security headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    # Enable caching
    proxy_cache_path /path/to/cache levels=1:2 keys_zone=cache_zone:10m max_size=10g inactive=60m;
    proxy_cache cache_zone;
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404 1m;
    proxy_cache_use_stale error timeout updating;

    # Proxy requests to the backend server
    location / {
      # Rate limiting per IP
      limit_req zone=ddos_req burst=20;

      # Enable caching
      proxy_cache cache_zone;
      proxy_cache_bypass $http_cache_control;
      proxy_no_cache $http_pragma $http_authorization;
      proxy_cache_valid any 5m;

      proxy_pass http://backend_server;
    }

    # Block requests from specific IP addresses or IP ranges
    deny 192.168.1.10;
    deny 10.0.0.0/24;

    # Block requests from known spammer sites
    map $http_referer $block_spam_referer {
      default 0;
      ~*spam-site\.com 1;
      ~*evil-site\.com 1;
    }

    # Block requests containing common bot user agents
    map $http_user_agent $block_bot_user_agent {
      default 0;
      ~*bot 1;
      ~*crawler 1;
      ~*spider 1;
    }

    # Block requests for known backdoor URLs
    map $request_uri $block_backdoor_uri {
      default 0;
      ~*backdoor\.php 1;
      ~*evilscript\.py 1;
    }

    # Block requests for specific file extensions and programming scripts
    location ~* \.(py|php|bash|sh)$ {
      return 403;
    }

    # Block requests for known phishing URLs
    map $uri $block_phishing_uri {
      default 0;
      ~*login\.php 1;
      ~*fake-page\.html 1;
    }

    location / {
      # Block requests with specific referers
      if ($block_spam_referer) {
        return 403;
      }

      # Block requests with specific user agents
      if ($block_bot_user_agent) {
        return 403;
      }

      # Block requests for known backdoor URLs
      if ($block_backdoor_uri) {
        return 403;
      }

      # Block requests for specific file extensions and programming scripts
      if ($uri ~* \.(py|php|bash|sh)$) {
        return 403;
      }

      # Block requests for known phishing URLs
      if ($block_phishing_uri) {
        return 403;
      }

      # Set security headers
      add_header X-Content-Type-Options "nosniff";
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-XSS-Protection "1; mode=block";

      # Proxy requests to the backend server
      proxy_pass http://backend_server;
    }
  }
}
