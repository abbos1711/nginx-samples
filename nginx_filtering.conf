http {
  # ...

  server {
    listen 80;
    server_name example.com;

    # Block requests from specific IP addresses or IP ranges
    deny 192.168.1.10;
    deny 10.0.0.0/24;

    # Block requests from known spammer sites
    map $http_referer $block_spam_referer {
      default 0;
      ~*spam-site\.com 1;
      ~*evil-site\.com 1;
    }

    # Block requests containing common bot user agents
    map $http_user_agent $block_bot_user_agent {
      default 0;
      ~*bot 1;
      ~*crawler 1;
      ~*spider 1;
    }

    # Block requests for known backdoor URLs
    map $request_uri $block_backdoor_uri {
      default 0;
      ~*backdoor\.php 1;
      ~*evilscript\.py 1;
    }

    # Block requests for specific file extensions and programming scripts
    location ~* \.(py|php|bash|sh)$ {
      return 403;
    }

    # Block requests for known phishing URLs
    map $uri $block_phishing_uri {
      default 0;
      ~*login\.php 1;
      ~*fake-page\.html 1;
    }

    location / {
      # Block requests with specific referers
      if ($block_spam_referer) {
        return 403;
      }

      # Block requests with specific user agents
      if ($block_bot_user_agent) {
        return 403;
      }

      # Block requests for known backdoor URLs
      if ($block_backdoor_uri) {
        return 403;
      }

      # Block requests for specific file extensions and programming scripts
      if ($uri ~* \.(py|php|bash|sh)$) {
        return 403;
      }

      # Block requests for known phishing URLs
      if ($block_phishing_uri) {
        return 403;
      }

      # Set security headers
      add_header X-Content-Type-Options "nosniff";
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-XSS-Protection "1; mode=block";

      # Proxy requests to the backend server
      proxy_pass http://backend_server;
    }
  }
}
